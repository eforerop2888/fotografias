<?php

/*
 *
 * @file
 * Core, General configuration
 */

function core_menu(){
  $items['add/favorite/%'] = array(
    'title' => 'Agregando favorito',
    'page callback' => 'favorite',
    'page arguments' => array(2),
    'access callback' => true,
    'type' => MENU_CALLBACK
  );
  return $items;
}


function core_block_info(){

  $blocks['core_footer'] = array(
    'info' => t('footer'),
  );
  $blocks['core_menu'] = array(
    'info' => t('menu'),
  );


  return $blocks;
}

function core_block_view($delta = ''){
  global $user;
  $name = user_load($user->uid);
  if(!empty($name->field_name)){
    $user_name = $name->field_name['und'][0]['value'];
  }else{
    $user_name = '';
  }
  
  $imagenes = drupal_get_path('theme', 'fotografias');
  global $base_url;
  switch($delta){
    case 'core_footer':
      $block['subject'] = '';
      $block['content'] = theme('footer', array('data' => variable_get('footer_content')));
      break;
    case 'core_menu':
      $block['subject'] = '';
      $block['content'] = theme('menu', array('base_url' => $base_url,
       'user_name' => $user_name,
       'imagenes' => $imagenes,));
      break;
  }
  return $block;
}

/**
 *Implement hook_theme
 */
function core_theme($existing, $type, $theme, $path){
  return array(
    'footer' => array(
      'template' => 'templates/footer',
    ),
    'menu' => array(
      'template' => 'templates/menu',
    ),
  );
}

function core_block_configure($delta = '') {
  $form = array();
  if ($delta == 'core_footer') {
    $form['footer_content'] = array(
      '#type' => 'textfield',
      '#title' => t('Digite el contenido del footer'),
      '#default_value' => variable_get('footer_content', ''),
    );
  }

  return $form;
}

function core_block_save($delta = '', $edit = array()) {
  if ($delta == 'core_footer') {
    variable_set('footer_content', $edit['footer_content']);
  }
}

/*
 * Implements hook_user_login
 */
function core_user_login(&$edit, $account){
  //Se implementa API de evento log para crear nuevo tipo de log
  $log = array(
    'type' => 'Sesión',
    'operation' => 'Inicio Sesión',
    'description' => 'Inicio de sesión: ' . $account->name,
    'uid' => $account->uid,
  );
  event_log_insert($log);  
}

function favorite($fid){
  global $user;
  $node_favorito = db_select('node', 'n')
    ->fields('n')
    ->condition('type', 'favoritos','=')
    ->condition('uid', $user->uid,'=')
    ->execute()
    ->fetchAssoc();

  if(empty($node_favorito)){
    add_favorite($fid);
  }else{
    $img_favorito = db_select('field_data_field_fotos_favoritas', 'fav')
      ->fields('fav')
      ->condition('entity_id ', $node_favorito['nid'],'=')
      ->condition('field_fotos_favoritas_fid', $fid,'=')
      ->condition('bundle', 'favoritos','=')
      ->execute()
      ->fetchAssoc();
    if(empty($img_favorito)){
      update_favorite($fid, $node_favorito['nid']);
    }else{
      delete_favorite($fid, $node_favorito['nid']);
    }
  }
}


function add_favorite($fid){
  global $user;
  $file = file_load($fid);
  $title = 'favoritos-' . $user->uid;
  $node = new stdClass();
  $node->uid      = $user->uid;
  $node->type     = 'favoritos';
  node_object_prepare($node);
  $node->title    = $title;
  $node->status   = 1;
  $node->promote  = 0;
  $node->sticky   = 0;
  $node->language = 'es';

  $node->field_fotos_favoritas[LANGUAGE_NONE][] = array(
    'fid' => $file->fid,
    'filename' => $file->filename,
    'filemime' => $file->filemime,
    'uid' => $user->uid,
    'uri' => $file->uri,
    'status' => 1
  );

  node_save($node);

  $commands[] = ajax_command_replace('.output-favorite-' . $fid . ' span', '<span class="favorito_icono_noclic favorito_icono"></span>');
  $page = array('#type' => 'ajax', '#commands' => $commands);
  ajax_deliver($page);
}

function update_favorite($fid, $nid){
  global $user;
  $node = node_load($nid);
  $file = file_load($fid);

  $node->field_fotos_favoritas[LANGUAGE_NONE][] = array(
    'fid' => $file->fid,
    'filename' => $file->filename,
    'filemime' => $file->filemime,
    'uid' => $user->uid,
    'uri' => $file->uri,
    'status' => 1
  );

  node_save($node);

  $commands[] = ajax_command_replace('.output-favorite-' . $fid . ' span', '<span class="favorito_icono_noclic favorito_icono"></span>');
  $page = array('#type' => 'ajax', '#commands' => $commands);
  ajax_deliver($page);
}

function delete_favorite($fid, $nid){
  db_delete('field_data_field_fotos_favoritas')
    ->condition('entity_id ', $nid, '=')
    ->condition('field_fotos_favoritas_fid', $fid,'=')
    ->condition('bundle', 'favoritos', '=')
    ->execute();

  db_delete('field_revision_field_fotos_favoritas')
    ->condition('entity_id ', $nid, '=')
    ->condition('field_fotos_favoritas_fid', $fid,'=')
    ->condition('bundle', 'favoritos','=')
    ->execute();

  $commands[] = ajax_command_replace('.output-favorite-' . $fid . ' span', '<span class="favorito_icono_clic favorito_icono"></span>');
  $page = array('#type' => 'ajax', '#commands' => $commands);
  ajax_deliver($page);
}

function core_views_pre_render(&$view){
  //if ($current_path == "galerias/todas") {
    drupal_add_library('system', 'drupal.ajax');
    drupal_add_library('system', 'jquery.form');
  //}
}

function core_taxonomy_term_presave($term) {
  // Change existing term? Nothing to do!
  if ((isset($term->tid)) && ($term->tid > 0)) {
    return;
    }
  
  // Lookup the term in the given vocabulary
  $query = new EntityFieldQuery;
  $result = $query
    ->entityCondition('entity_type', 'taxonomy_term')
    ->propertyCondition('name', $term->name)
    ->propertyCondition('vid', $term->vid)
    ->execute();
  
  // Term doesn't exist: handle it the normal way
  if (empty($result['taxonomy_term'])) {
    return;
    }
  
  // Term exists already: update it
  $termslist = array_keys($result['taxonomy_term']);
  $tid = array_shift($termslist);
  $term->tid = $tid;
  $original = taxonomy_term_load($tid);
  $term->original = $original;
}

